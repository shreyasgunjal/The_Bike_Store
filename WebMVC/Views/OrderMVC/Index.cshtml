@model IEnumerable<WebMVC.Models.Order>

@{
    ViewBag.Title = "Order Details";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var dropdownOptions = new List<SelectListItem>
{
        new SelectListItem { Value = "1", Text = "Customer Id" },
        new SelectListItem { Value = "2", Text = "Customer Name" },
        new SelectListItem { Value = "3", Text = "Order Date" },
        new SelectListItem { Value = "4", Text = "Status" },
        new SelectListItem { Value = "5", Text = "Number Of Orders By Date" },
        new SelectListItem { Value = "6", Text = "Maximum Order Place On Particular Date" }
    };
}

<h2 class="mb-4">Order Details</h2>
@using (Html.BeginForm("Index", "OrderMVC", FormMethod.Get))
{
    <div class="container">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="d-flex align-items-center justify-content-between">
                    <!-- Filter Dropdown -->
                    <div class="me-2">
                        @Html.DropDownList("filterOption", dropdownOptions, "Filter By", new { @class = "form-select" })
                    </div>

                    <!-- Search Input -->
                    <div class="me-2 flex-grow-1">
                        <input type="text" id="searchInput" name="searchTerm" placeholder="Search" class="form-control" />
                    </div>

                    <!-- Search Button -->
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container mb-4">
    <p>
        @Html.ActionLink("Create New", "Create", new { @class = "btn btn-success" })
    </p>
</div>

<div class="container">
    <table class="table table-striped table-bordered">
        @if (Model != null && Model.Any())
        {
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.Order_id)</th>
                    <th>@Html.DisplayNameFor(model => model.Customer_id)</th>
                    <th>@Html.DisplayNameFor(model => model.Order_Status)</th>
                    <th>@Html.DisplayNameFor(model => model.Order_date)</th>
                    <th>@Html.DisplayNameFor(model => model.Required_date)</th>
                    <th>@Html.DisplayNameFor(model => model.Shipped_date)</th>
                    <th>@Html.DisplayNameFor(model => model.Store_Id)</th>
                    <th>@Html.DisplayNameFor(model => model.Staff_Id)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Order_id)</td>
                        <td>@Html.DisplayFor(modelItem => item.Customer_id)</td>
                        <td>@Html.DisplayFor(modelItem => item.Order_Status)</td>
                        <td>@item.Order_date.ToString("dd-MM-yyyy")</td>
                        <td>@item.Required_date.ToString("dd-MM-yyyy")</td>
                        <td>
                            @if (item.Shipped_date.HasValue)
                            {
                                @item.Shipped_date.Value.ToString("dd-MM-yyyy")
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.Store_Id)</td>
                        <td>@Html.DisplayFor(modelItem => item.Staff_Id)</td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.Order_id }, new { @class = "btn btn-warning btn-sm" }) |
                            @Html.ActionLink("Details", "Details", new { id = item.Order_id }, new { @class = "btn btn-info btn-sm" }) |
                            @Html.ActionLink("Delete", "Delete", new { id = item.Order_id }, new { @class = "btn btn-danger btn-sm" })
                        </td>
                    </tr>
                }
            </tbody>
        }
        else if (ViewBag.MaximumOrder != null)
        {
            // Parse the date string to DateTime and format it
            DateTime maxOrderDate;
            if (DateTime.TryParse(ViewBag.MaximumOrder.ToString(), out maxOrderDate))
            {
                var formattedDate = maxOrderDate.ToString("dd-MM-yyyy");
                <tr>
                    <td colspan="9">
                        <h3>Order date with maximum orders</h3>
                        <p>Date: @formattedDate</p>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="9" class="text-center">No records found.</td>
            </tr>
        }
    </table>
</div>

@if (ViewBag.NoOfOrderByOrderDate != null)
{
    <div class="container mb-4">
        <h3>Orders by Date</h3>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Order Date</th>
                    <th>No. Of Orders</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ViewBag.NoOfOrderByOrderDate)
                {
                    <tr>
                        <td>@item.OrderDate.ToString("dd-MM-yyyy")</td>
                        <td>@item.NumberOfOrders</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <div class="alert alert-info">
        @ViewBag.Message
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var filterDropdown = document.getElementById('filterOption');
        var searchInput = document.getElementById('searchInput');

        filterDropdown.addEventListener('change', function () {
            var selectedValue = this.value;

            if (selectedValue === "5" || selectedValue === "6") {
                searchInput.style.display = 'none';
            } else {
                searchInput.style.display = 'inline-block';

                if (selectedValue === "1") {
                    searchInput.placeholder = "Enter Customer Id";
                    searchInput.name = "customerid";
                } else if (selectedValue === "2") {
                    searchInput.placeholder = "Enter Customer Name";
                    searchInput.name = "customername";
                } else if (selectedValue === "3") {
                    searchInput.placeholder = "YYYY-MM-DD";
                    searchInput.name = "orderdate";
                } else if (selectedValue === "4") {
                    searchInput.placeholder = "Status";
                    searchInput.name = "status";
                } else {
                    searchInput.placeholder = "Search"
                    searchInput.name = "searchTerm";
                }
            }
        });

        filterDropdown.dispatchEvent(new Event('change'));
    });
</script>

<style>
    .container {
        max-width: 1200px;
    }

    .form-select, .form-control {
        height: calc(2.25rem + 2px);
    }

    .btn-primary, .btn-success, .btn-warning, .btn-info, .btn-danger {
        height: calc(2.25rem + 2px);
        padding: 0.375rem 0.75rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f9f9f9;
    }

    .table-bordered {
        border: 1px solid #dee2e6;
    }
</style>
